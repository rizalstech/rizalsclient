// Package rizalsclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package rizalsclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BarbershopsAppGetAdminBusinesses request
	BarbershopsAppGetAdminBusinesses(ctx context.Context, params *BarbershopsAppGetAdminBusinessesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetCountries request
	BarbershopsAppGetCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppCreateCountryWithBody request with any body
	BarbershopsAppCreateCountryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppCreateCountry(ctx context.Context, body BarbershopsAppCreateCountryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinesses request
	BarbershopsAppGetBusinesses(ctx context.Context, params *BarbershopsAppGetBusinessesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppDeleteBusiness request
	BarbershopsAppDeleteBusiness(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusiness request
	BarbershopsAppGetBusiness(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppUpdateBusinessWithBody request with any body
	BarbershopsAppUpdateBusinessWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppUpdateBusiness(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessAvailability request
	BarbershopsAppGetBusinessAvailability(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessAvailabilityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessBalance request
	BarbershopsAppGetBusinessBalance(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppBookWithBody request with any body
	BarbershopsAppBookWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppBook(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppSetupPaymentIntentWithBody request with any body
	BarbershopsAppSetupPaymentIntentWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppSetupPaymentIntent(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppSetupPaymentIntentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessBookings request
	BarbershopsAppGetBusinessBookings(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessBookingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppRejectBusinessBooking request
	BarbershopsAppRejectBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessBooking request
	BarbershopsAppGetBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppCancelBusinessBooking request
	BarbershopsAppCancelBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppConfirmBusinessBooking request
	BarbershopsAppConfirmBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppCreateReviewWithBody request with any body
	BarbershopsAppCreateReviewWithBody(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppCreateReview(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, body BarbershopsAppCreateReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessMembers request
	BarbershopsAppGetBusinessMembers(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppCreateBusinessMemberWithBody request with any body
	BarbershopsAppCreateBusinessMemberWithBody(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppCreateBusinessMember(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, body BarbershopsAppCreateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppDeleteBusinessMember request
	BarbershopsAppDeleteBusinessMember(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessMember request
	BarbershopsAppGetBusinessMember(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppUpdateBusinessMemberWithBody request with any body
	BarbershopsAppUpdateBusinessMemberWithBody(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppUpdateBusinessMember(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, body BarbershopsAppUpdateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetCustomers request
	BarbershopsAppGetCustomers(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetCustomer request
	BarbershopsAppGetCustomer(ctx context.Context, businessId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessPhotos request
	BarbershopsAppGetBusinessPhotos(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppAddBusinessPhotoWithBody request with any body
	BarbershopsAppAddBusinessPhotoWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppAddBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppAddBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppDeleteBusinessPhoto request
	BarbershopsAppDeleteBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessPhoto request
	BarbershopsAppGetBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppUpdateBusinessPhotoWithBody request with any body
	BarbershopsAppUpdateBusinessPhotoWithBody(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppUpdateBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, body BarbershopsAppUpdateBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessRequirements request
	BarbershopsAppGetBusinessRequirements(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessReviews request
	BarbershopsAppGetBusinessReviews(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessSchedule request
	BarbershopsAppGetBusinessSchedule(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppUpdateBusinessScheduleWithBody request with any body
	BarbershopsAppUpdateBusinessScheduleWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppUpdateBusinessSchedule(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetServices request
	BarbershopsAppGetServices(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppCreateServiceWithBody request with any body
	BarbershopsAppCreateServiceWithBody(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppCreateService(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, body BarbershopsAppCreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppDeleteService request
	BarbershopsAppDeleteService(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetService request
	BarbershopsAppGetService(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppUpdateServiceWithBody request with any body
	BarbershopsAppUpdateServiceWithBody(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppUpdateService(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, body BarbershopsAppUpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetBusinessSettings request
	BarbershopsAppGetBusinessSettings(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppUpdateBusinessSettingsWithBody request with any body
	BarbershopsAppUpdateBusinessSettingsWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppUpdateBusinessSettings(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetPublicBusinessSettings request
	BarbershopsAppGetPublicBusinessSettings(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetMyBookings request
	BarbershopsAppGetMyBookings(ctx context.Context, params *BarbershopsAppGetMyBookingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetMyBusinesses request
	BarbershopsAppGetMyBusinesses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppCreateBusinessWithBody request with any body
	BarbershopsAppCreateBusinessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BarbershopsAppCreateBusiness(ctx context.Context, body BarbershopsAppCreateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BarbershopsAppGetMyReviews request
	BarbershopsAppGetMyReviews(ctx context.Context, params *BarbershopsAppGetMyReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RadminAppGetApps request
	RadminAppGetApps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RadminAppCreateAppWithBody request with any body
	RadminAppCreateAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RadminAppCreateApp(ctx context.Context, body RadminAppCreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RadminAppGetApp request
	RadminAppGetApp(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RadminAppUpdateAppWithBody request with any body
	RadminAppUpdateAppWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RadminAppUpdateApp(ctx context.Context, appId string, body RadminAppUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceGetAdminUsers request
	AuthServiceGetAdminUsers(ctx context.Context, appId string, params *AuthServiceGetAdminUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceGoogleSignInCallback request
	AuthServiceGoogleSignInCallback(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceGoogleSignIn request
	AuthServiceGoogleSignIn(ctx context.Context, appId string, params *AuthServiceGoogleSignInParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceGetCurrentUser request
	AuthServiceGetCurrentUser(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceUpdateCurrentUserWithBody request with any body
	AuthServiceUpdateCurrentUserWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceForgotPasswordWithBody request with any body
	AuthServiceForgotPasswordWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthServiceForgotPassword(ctx context.Context, appId string, body AuthServiceForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceResetPasswordWithBody request with any body
	AuthServiceResetPasswordWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthServiceResetPassword(ctx context.Context, appId string, body AuthServiceResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceSendEmailVerification request
	AuthServiceSendEmailVerification(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceSendPhoneVerification request
	AuthServiceSendPhoneVerification(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceVerifyEmailWithBody request with any body
	AuthServiceVerifyEmailWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthServiceVerifyEmail(ctx context.Context, appId string, body AuthServiceVerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceVerifyPhoneWithBody request with any body
	AuthServiceVerifyPhoneWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthServiceVerifyPhone(ctx context.Context, appId string, body AuthServiceVerifyPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceSignInWithBody request with any body
	AuthServiceSignInWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthServiceSignIn(ctx context.Context, appId string, body AuthServiceSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceSignOut request
	AuthServiceSignOut(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthServiceSignUpWithBody request with any body
	AuthServiceSignUpWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AuthServiceSignUp(ctx context.Context, appId string, body AuthServiceSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactServiceGetCareerApplications request
	ContactServiceGetCareerApplications(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactServiceGetContactRequests request
	ContactServiceGetContactRequests(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactServiceApplyCareerWithBody request with any body
	ContactServiceApplyCareerWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ContactServiceContactRequestWithBody request with any body
	ContactServiceContactRequestWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ContactServiceContactRequest(ctx context.Context, appId string, body ContactServiceContactRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BarbershopsAppGetAdminBusinesses(ctx context.Context, params *BarbershopsAppGetAdminBusinessesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetAdminBusinessesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetCountries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetCountriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateCountryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateCountryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateCountry(ctx context.Context, body BarbershopsAppCreateCountryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateCountryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinesses(ctx context.Context, params *BarbershopsAppGetBusinessesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppDeleteBusiness(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppDeleteBusinessRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusiness(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessRequestWithBody(c.Server, businessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusiness(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessRequest(c.Server, businessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessAvailability(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessAvailabilityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessAvailabilityRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessBalance(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessBalanceRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppBookWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppBookRequestWithBody(c.Server, businessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppBook(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppBookRequest(c.Server, businessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppSetupPaymentIntentWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppSetupPaymentIntentRequestWithBody(c.Server, businessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppSetupPaymentIntent(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppSetupPaymentIntentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppSetupPaymentIntentRequest(c.Server, businessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessBookings(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessBookingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessBookingsRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppRejectBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppRejectBusinessBookingRequest(c.Server, businessId, bookingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessBookingRequest(c.Server, businessId, bookingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCancelBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCancelBusinessBookingRequest(c.Server, businessId, bookingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppConfirmBusinessBooking(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppConfirmBusinessBookingRequest(c.Server, businessId, bookingId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateReviewWithBody(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateReviewRequestWithBody(c.Server, businessId, bookingId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateReview(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, body BarbershopsAppCreateReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateReviewRequest(c.Server, businessId, bookingId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessMembers(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessMembersRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateBusinessMemberWithBody(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateBusinessMemberRequestWithBody(c.Server, businessId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateBusinessMember(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, body BarbershopsAppCreateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateBusinessMemberRequest(c.Server, businessId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppDeleteBusinessMember(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppDeleteBusinessMemberRequest(c.Server, businessId, businessMemberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessMember(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessMemberRequest(c.Server, businessId, businessMemberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessMemberWithBody(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessMemberRequestWithBody(c.Server, businessId, businessMemberId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessMember(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, body BarbershopsAppUpdateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessMemberRequest(c.Server, businessId, businessMemberId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetCustomers(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetCustomersRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetCustomer(ctx context.Context, businessId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetCustomerRequest(c.Server, businessId, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessPhotos(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessPhotosRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppAddBusinessPhotoWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppAddBusinessPhotoRequestWithBody(c.Server, businessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppAddBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppAddBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppAddBusinessPhotoRequest(c.Server, businessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppDeleteBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppDeleteBusinessPhotoRequest(c.Server, businessId, photoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessPhotoRequest(c.Server, businessId, photoId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessPhotoWithBody(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessPhotoRequestWithBody(c.Server, businessId, photoId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessPhoto(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, body BarbershopsAppUpdateBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessPhotoRequest(c.Server, businessId, photoId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessRequirements(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessRequirementsRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessReviews(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessReviewsRequest(c.Server, businessId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessSchedule(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessScheduleRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessScheduleWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessScheduleRequestWithBody(c.Server, businessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessSchedule(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessScheduleRequest(c.Server, businessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetServices(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetServicesRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateServiceWithBody(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateServiceRequestWithBody(c.Server, businessId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateService(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, body BarbershopsAppCreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateServiceRequest(c.Server, businessId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppDeleteService(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppDeleteServiceRequest(c.Server, businessId, serviceTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetService(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetServiceRequest(c.Server, businessId, serviceTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateServiceWithBody(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateServiceRequestWithBody(c.Server, businessId, serviceTypeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateService(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, body BarbershopsAppUpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateServiceRequest(c.Server, businessId, serviceTypeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetBusinessSettings(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetBusinessSettingsRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessSettingsWithBody(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessSettingsRequestWithBody(c.Server, businessId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppUpdateBusinessSettings(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppUpdateBusinessSettingsRequest(c.Server, businessId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetPublicBusinessSettings(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetPublicBusinessSettingsRequest(c.Server, businessId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetMyBookings(ctx context.Context, params *BarbershopsAppGetMyBookingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetMyBookingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetMyBusinesses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetMyBusinessesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateBusinessWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateBusinessRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppCreateBusiness(ctx context.Context, body BarbershopsAppCreateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppCreateBusinessRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BarbershopsAppGetMyReviews(ctx context.Context, params *BarbershopsAppGetMyReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBarbershopsAppGetMyReviewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RadminAppGetApps(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRadminAppGetAppsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RadminAppCreateAppWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRadminAppCreateAppRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RadminAppCreateApp(ctx context.Context, body RadminAppCreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRadminAppCreateAppRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RadminAppGetApp(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRadminAppGetAppRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RadminAppUpdateAppWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRadminAppUpdateAppRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RadminAppUpdateApp(ctx context.Context, appId string, body RadminAppUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRadminAppUpdateAppRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceGetAdminUsers(ctx context.Context, appId string, params *AuthServiceGetAdminUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceGetAdminUsersRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceGoogleSignInCallback(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceGoogleSignInCallbackRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceGoogleSignIn(ctx context.Context, appId string, params *AuthServiceGoogleSignInParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceGoogleSignInRequest(c.Server, appId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceGetCurrentUser(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceGetCurrentUserRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceUpdateCurrentUserWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceUpdateCurrentUserRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceForgotPasswordWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceForgotPasswordRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceForgotPassword(ctx context.Context, appId string, body AuthServiceForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceForgotPasswordRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceResetPasswordWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceResetPasswordRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceResetPassword(ctx context.Context, appId string, body AuthServiceResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceResetPasswordRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSendEmailVerification(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSendEmailVerificationRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSendPhoneVerification(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSendPhoneVerificationRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceVerifyEmailWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceVerifyEmailRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceVerifyEmail(ctx context.Context, appId string, body AuthServiceVerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceVerifyEmailRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceVerifyPhoneWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceVerifyPhoneRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceVerifyPhone(ctx context.Context, appId string, body AuthServiceVerifyPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceVerifyPhoneRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSignInWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSignInRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSignIn(ctx context.Context, appId string, body AuthServiceSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSignInRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSignOut(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSignOutRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSignUpWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSignUpRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthServiceSignUp(ctx context.Context, appId string, body AuthServiceSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthServiceSignUpRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactServiceGetCareerApplications(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactServiceGetCareerApplicationsRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactServiceGetContactRequests(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactServiceGetContactRequestsRequest(c.Server, appId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactServiceApplyCareerWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactServiceApplyCareerRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactServiceContactRequestWithBody(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactServiceContactRequestRequestWithBody(c.Server, appId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ContactServiceContactRequest(ctx context.Context, appId string, body ContactServiceContactRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewContactServiceContactRequestRequest(c.Server, appId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBarbershopsAppGetAdminBusinessesRequest generates requests for BarbershopsAppGetAdminBusinesses
func NewBarbershopsAppGetAdminBusinessesRequest(server string, params *BarbershopsAppGetAdminBusinessesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/admin/businesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetCountriesRequest generates requests for BarbershopsAppGetCountries
func NewBarbershopsAppGetCountriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/admin/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppCreateCountryRequest calls the generic BarbershopsAppCreateCountry builder with application/json body
func NewBarbershopsAppCreateCountryRequest(server string, body BarbershopsAppCreateCountryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppCreateCountryRequestWithBody(server, "application/json", bodyReader)
}

// NewBarbershopsAppCreateCountryRequestWithBody generates requests for BarbershopsAppCreateCountry with any type of body
func NewBarbershopsAppCreateCountryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/admin/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetBusinessesRequest generates requests for BarbershopsAppGetBusinesses
func NewBarbershopsAppGetBusinessesRequest(server string, params *BarbershopsAppGetBusinessesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxDistance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxDistance", runtime.ParamLocationQuery, *params.MaxDistance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceKind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "serviceKind", runtime.ParamLocationQuery, *params.ServiceKind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxPrice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxPrice", runtime.ParamLocationQuery, *params.MaxPrice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinPrice != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minPrice", runtime.ParamLocationQuery, *params.MinPrice); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MinRating != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minRating", runtime.ParamLocationQuery, *params.MinRating); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithinLats != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "withinLats", runtime.ParamLocationQuery, *params.WithinLats); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithinLngs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "withinLngs", runtime.ParamLocationQuery, *params.WithinLngs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DistanceFrom != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "distanceFrom", runtime.ParamLocationQuery, *params.DistanceFrom); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeNoRating != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeNoRating", runtime.ParamLocationQuery, *params.IncludeNoRating); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppDeleteBusinessRequest generates requests for BarbershopsAppDeleteBusiness
func NewBarbershopsAppDeleteBusinessRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessRequest generates requests for BarbershopsAppGetBusiness
func NewBarbershopsAppGetBusinessRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppUpdateBusinessRequest calls the generic BarbershopsAppUpdateBusiness builder with application/json body
func NewBarbershopsAppUpdateBusinessRequest(server string, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppUpdateBusinessRequestWithBody(server, businessId, "application/json", bodyReader)
}

// NewBarbershopsAppUpdateBusinessRequestWithBody generates requests for BarbershopsAppUpdateBusiness with any type of body
func NewBarbershopsAppUpdateBusinessRequestWithBody(server string, businessId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetBusinessAvailabilityRequest generates requests for BarbershopsAppGetBusinessAvailability
func NewBarbershopsAppGetBusinessAvailabilityRequest(server string, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessAvailabilityParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/availability", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BusinessMemberId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "businessMemberId", runtime.ParamLocationQuery, *params.BusinessMemberId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ServiceTypeId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serviceTypeId", runtime.ParamLocationQuery, *params.ServiceTypeId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Time != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time", runtime.ParamLocationQuery, *params.Time); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessBalanceRequest generates requests for BarbershopsAppGetBusinessBalance
func NewBarbershopsAppGetBusinessBalanceRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppBookRequest calls the generic BarbershopsAppBook builder with application/json body
func NewBarbershopsAppBookRequest(server string, businessId openapi_types.UUID, body BarbershopsAppBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppBookRequestWithBody(server, businessId, "application/json", bodyReader)
}

// NewBarbershopsAppBookRequestWithBody generates requests for BarbershopsAppBook with any type of body
func NewBarbershopsAppBookRequestWithBody(server string, businessId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/book", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppSetupPaymentIntentRequest calls the generic BarbershopsAppSetupPaymentIntent builder with application/json body
func NewBarbershopsAppSetupPaymentIntentRequest(server string, businessId openapi_types.UUID, body BarbershopsAppSetupPaymentIntentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppSetupPaymentIntentRequestWithBody(server, businessId, "application/json", bodyReader)
}

// NewBarbershopsAppSetupPaymentIntentRequestWithBody generates requests for BarbershopsAppSetupPaymentIntent with any type of body
func NewBarbershopsAppSetupPaymentIntentRequestWithBody(server string, businessId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/book/payment-intent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetBusinessBookingsRequest generates requests for BarbershopsAppGetBusinessBookings
func NewBarbershopsAppGetBusinessBookingsRequest(server string, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessBookingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/bookings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WeekOf != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "weekOf", runtime.ParamLocationQuery, *params.WeekOf); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Confirmed != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "confirmed", runtime.ParamLocationQuery, *params.Confirmed); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppRejectBusinessBookingRequest generates requests for BarbershopsAppRejectBusinessBooking
func NewBarbershopsAppRejectBusinessBookingRequest(server string, businessId openapi_types.UUID, bookingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, bookingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/bookings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessBookingRequest generates requests for BarbershopsAppGetBusinessBooking
func NewBarbershopsAppGetBusinessBookingRequest(server string, businessId openapi_types.UUID, bookingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, bookingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/bookings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppCancelBusinessBookingRequest generates requests for BarbershopsAppCancelBusinessBooking
func NewBarbershopsAppCancelBusinessBookingRequest(server string, businessId openapi_types.UUID, bookingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, bookingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/bookings/%s/cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppConfirmBusinessBookingRequest generates requests for BarbershopsAppConfirmBusinessBooking
func NewBarbershopsAppConfirmBusinessBookingRequest(server string, businessId openapi_types.UUID, bookingId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, bookingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/bookings/%s/confirm", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppCreateReviewRequest calls the generic BarbershopsAppCreateReview builder with application/json body
func NewBarbershopsAppCreateReviewRequest(server string, businessId openapi_types.UUID, bookingId openapi_types.UUID, body BarbershopsAppCreateReviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppCreateReviewRequestWithBody(server, businessId, bookingId, "application/json", bodyReader)
}

// NewBarbershopsAppCreateReviewRequestWithBody generates requests for BarbershopsAppCreateReview with any type of body
func NewBarbershopsAppCreateReviewRequestWithBody(server string, businessId openapi_types.UUID, bookingId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "bookingId", runtime.ParamLocationPath, bookingId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/bookings/%s/review", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetBusinessMembersRequest generates requests for BarbershopsAppGetBusinessMembers
func NewBarbershopsAppGetBusinessMembersRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/businessMembers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppCreateBusinessMemberRequest calls the generic BarbershopsAppCreateBusinessMember builder with application/json body
func NewBarbershopsAppCreateBusinessMemberRequest(server string, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, body BarbershopsAppCreateBusinessMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppCreateBusinessMemberRequestWithBody(server, businessId, params, "application/json", bodyReader)
}

// NewBarbershopsAppCreateBusinessMemberRequestWithBody generates requests for BarbershopsAppCreateBusinessMember with any type of body
func NewBarbershopsAppCreateBusinessMemberRequestWithBody(server string, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/businessMembers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Simulation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simulation", runtime.ParamLocationQuery, *params.Simulation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppDeleteBusinessMemberRequest generates requests for BarbershopsAppDeleteBusinessMember
func NewBarbershopsAppDeleteBusinessMemberRequest(server string, businessId openapi_types.UUID, businessMemberId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "businessMemberId", runtime.ParamLocationPath, businessMemberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/businessMembers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessMemberRequest generates requests for BarbershopsAppGetBusinessMember
func NewBarbershopsAppGetBusinessMemberRequest(server string, businessId openapi_types.UUID, businessMemberId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "businessMemberId", runtime.ParamLocationPath, businessMemberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/businessMembers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppUpdateBusinessMemberRequest calls the generic BarbershopsAppUpdateBusinessMember builder with application/json body
func NewBarbershopsAppUpdateBusinessMemberRequest(server string, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, body BarbershopsAppUpdateBusinessMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppUpdateBusinessMemberRequestWithBody(server, businessId, businessMemberId, "application/json", bodyReader)
}

// NewBarbershopsAppUpdateBusinessMemberRequestWithBody generates requests for BarbershopsAppUpdateBusinessMember with any type of body
func NewBarbershopsAppUpdateBusinessMemberRequestWithBody(server string, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "businessMemberId", runtime.ParamLocationPath, businessMemberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/businessMembers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetCustomersRequest generates requests for BarbershopsAppGetCustomers
func NewBarbershopsAppGetCustomersRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/customers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetCustomerRequest generates requests for BarbershopsAppGetCustomer
func NewBarbershopsAppGetCustomerRequest(server string, businessId openapi_types.UUID, customerId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/customers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessPhotosRequest generates requests for BarbershopsAppGetBusinessPhotos
func NewBarbershopsAppGetBusinessPhotosRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/photos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppAddBusinessPhotoRequest calls the generic BarbershopsAppAddBusinessPhoto builder with application/json body
func NewBarbershopsAppAddBusinessPhotoRequest(server string, businessId openapi_types.UUID, body BarbershopsAppAddBusinessPhotoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppAddBusinessPhotoRequestWithBody(server, businessId, "application/json", bodyReader)
}

// NewBarbershopsAppAddBusinessPhotoRequestWithBody generates requests for BarbershopsAppAddBusinessPhoto with any type of body
func NewBarbershopsAppAddBusinessPhotoRequestWithBody(server string, businessId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/photos", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppDeleteBusinessPhotoRequest generates requests for BarbershopsAppDeleteBusinessPhoto
func NewBarbershopsAppDeleteBusinessPhotoRequest(server string, businessId openapi_types.UUID, photoId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/photos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessPhotoRequest generates requests for BarbershopsAppGetBusinessPhoto
func NewBarbershopsAppGetBusinessPhotoRequest(server string, businessId openapi_types.UUID, photoId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/photos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppUpdateBusinessPhotoRequest calls the generic BarbershopsAppUpdateBusinessPhoto builder with application/json body
func NewBarbershopsAppUpdateBusinessPhotoRequest(server string, businessId openapi_types.UUID, photoId openapi_types.UUID, body BarbershopsAppUpdateBusinessPhotoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppUpdateBusinessPhotoRequestWithBody(server, businessId, photoId, "application/json", bodyReader)
}

// NewBarbershopsAppUpdateBusinessPhotoRequestWithBody generates requests for BarbershopsAppUpdateBusinessPhoto with any type of body
func NewBarbershopsAppUpdateBusinessPhotoRequestWithBody(server string, businessId openapi_types.UUID, photoId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "photoId", runtime.ParamLocationPath, photoId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/photos/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetBusinessRequirementsRequest generates requests for BarbershopsAppGetBusinessRequirements
func NewBarbershopsAppGetBusinessRequirementsRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/requirements", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessReviewsRequest generates requests for BarbershopsAppGetBusinessReviews
func NewBarbershopsAppGetBusinessReviewsRequest(server string, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessReviewsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/reviews", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OnlyWithText != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "onlyWithText", runtime.ParamLocationQuery, *params.OnlyWithText); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetBusinessScheduleRequest generates requests for BarbershopsAppGetBusinessSchedule
func NewBarbershopsAppGetBusinessScheduleRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppUpdateBusinessScheduleRequest calls the generic BarbershopsAppUpdateBusinessSchedule builder with application/json body
func NewBarbershopsAppUpdateBusinessScheduleRequest(server string, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppUpdateBusinessScheduleRequestWithBody(server, businessId, "application/json", bodyReader)
}

// NewBarbershopsAppUpdateBusinessScheduleRequestWithBody generates requests for BarbershopsAppUpdateBusinessSchedule with any type of body
func NewBarbershopsAppUpdateBusinessScheduleRequestWithBody(server string, businessId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/schedule", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetServicesRequest generates requests for BarbershopsAppGetServices
func NewBarbershopsAppGetServicesRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppCreateServiceRequest calls the generic BarbershopsAppCreateService builder with application/json body
func NewBarbershopsAppCreateServiceRequest(server string, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, body BarbershopsAppCreateServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppCreateServiceRequestWithBody(server, businessId, params, "application/json", bodyReader)
}

// NewBarbershopsAppCreateServiceRequestWithBody generates requests for BarbershopsAppCreateService with any type of body
func NewBarbershopsAppCreateServiceRequestWithBody(server string, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/services", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Simulation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simulation", runtime.ParamLocationQuery, *params.Simulation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppDeleteServiceRequest generates requests for BarbershopsAppDeleteService
func NewBarbershopsAppDeleteServiceRequest(server string, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceTypeId", runtime.ParamLocationPath, serviceTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/services/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetServiceRequest generates requests for BarbershopsAppGetService
func NewBarbershopsAppGetServiceRequest(server string, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceTypeId", runtime.ParamLocationPath, serviceTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/services/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppUpdateServiceRequest calls the generic BarbershopsAppUpdateService builder with application/json body
func NewBarbershopsAppUpdateServiceRequest(server string, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, body BarbershopsAppUpdateServiceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppUpdateServiceRequestWithBody(server, businessId, serviceTypeId, "application/json", bodyReader)
}

// NewBarbershopsAppUpdateServiceRequestWithBody generates requests for BarbershopsAppUpdateService with any type of body
func NewBarbershopsAppUpdateServiceRequestWithBody(server string, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "serviceTypeId", runtime.ParamLocationPath, serviceTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/services/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetBusinessSettingsRequest generates requests for BarbershopsAppGetBusinessSettings
func NewBarbershopsAppGetBusinessSettingsRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppUpdateBusinessSettingsRequest calls the generic BarbershopsAppUpdateBusinessSettings builder with application/json body
func NewBarbershopsAppUpdateBusinessSettingsRequest(server string, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppUpdateBusinessSettingsRequestWithBody(server, businessId, "application/json", bodyReader)
}

// NewBarbershopsAppUpdateBusinessSettingsRequestWithBody generates requests for BarbershopsAppUpdateBusinessSettings with any type of body
func NewBarbershopsAppUpdateBusinessSettingsRequestWithBody(server string, businessId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/settings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetPublicBusinessSettingsRequest generates requests for BarbershopsAppGetPublicBusinessSettings
func NewBarbershopsAppGetPublicBusinessSettingsRequest(server string, businessId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "businessId", runtime.ParamLocationPath, businessId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/businesses/%s/settings/public", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetMyBookingsRequest generates requests for BarbershopsAppGetMyBookings
func NewBarbershopsAppGetMyBookingsRequest(server string, params *BarbershopsAppGetMyBookingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/me/bookings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppGetMyBusinessesRequest generates requests for BarbershopsAppGetMyBusinesses
func NewBarbershopsAppGetMyBusinessesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/me/businesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBarbershopsAppCreateBusinessRequest calls the generic BarbershopsAppCreateBusiness builder with application/json body
func NewBarbershopsAppCreateBusinessRequest(server string, body BarbershopsAppCreateBusinessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBarbershopsAppCreateBusinessRequestWithBody(server, "application/json", bodyReader)
}

// NewBarbershopsAppCreateBusinessRequestWithBody generates requests for BarbershopsAppCreateBusiness with any type of body
func NewBarbershopsAppCreateBusinessRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/me/businesses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBarbershopsAppGetMyReviewsRequest generates requests for BarbershopsAppGetMyReviews
func NewBarbershopsAppGetMyReviewsRequest(server string, params *BarbershopsAppGetMyReviewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/barbershops/v1/me/reviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRadminAppGetAppsRequest generates requests for RadminAppGetApps
func NewRadminAppGetAppsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/radmin/v1/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRadminAppCreateAppRequest calls the generic RadminAppCreateApp builder with application/json body
func NewRadminAppCreateAppRequest(server string, body RadminAppCreateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRadminAppCreateAppRequestWithBody(server, "application/json", bodyReader)
}

// NewRadminAppCreateAppRequestWithBody generates requests for RadminAppCreateApp with any type of body
func NewRadminAppCreateAppRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/radmin/v1/apps")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRadminAppGetAppRequest generates requests for RadminAppGetApp
func NewRadminAppGetAppRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/radmin/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRadminAppUpdateAppRequest calls the generic RadminAppUpdateApp builder with application/json body
func NewRadminAppUpdateAppRequest(server string, appId string, body RadminAppUpdateAppJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRadminAppUpdateAppRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewRadminAppUpdateAppRequestWithBody generates requests for RadminAppUpdateApp with any type of body
func NewRadminAppUpdateAppRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/radmin/v1/apps/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceGetAdminUsersRequest generates requests for AuthServiceGetAdminUsers
func NewAuthServiceGetAdminUsersRequest(server string, appId string, params *AuthServiceGetAdminUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/admin/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceGoogleSignInCallbackRequest generates requests for AuthServiceGoogleSignInCallback
func NewAuthServiceGoogleSignInCallbackRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/google/callback", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceGoogleSignInRequest generates requests for AuthServiceGoogleSignIn
func NewAuthServiceGoogleSignInRequest(server string, appId string, params *AuthServiceGoogleSignInParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/google/sign-in", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ReturnUrl != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "returnUrl", runtime.ParamLocationQuery, *params.ReturnUrl); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceGetCurrentUserRequest generates requests for AuthServiceGetCurrentUser
func NewAuthServiceGetCurrentUserRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceUpdateCurrentUserRequestWithBody generates requests for AuthServiceUpdateCurrentUser with any type of body
func NewAuthServiceUpdateCurrentUserRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceForgotPasswordRequest calls the generic AuthServiceForgotPassword builder with application/json body
func NewAuthServiceForgotPasswordRequest(server string, appId string, body AuthServiceForgotPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthServiceForgotPasswordRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAuthServiceForgotPasswordRequestWithBody generates requests for AuthServiceForgotPassword with any type of body
func NewAuthServiceForgotPasswordRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me/forgot-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceResetPasswordRequest calls the generic AuthServiceResetPassword builder with application/json body
func NewAuthServiceResetPasswordRequest(server string, appId string, body AuthServiceResetPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthServiceResetPasswordRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAuthServiceResetPasswordRequestWithBody generates requests for AuthServiceResetPassword with any type of body
func NewAuthServiceResetPasswordRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me/reset-password", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceSendEmailVerificationRequest generates requests for AuthServiceSendEmailVerification
func NewAuthServiceSendEmailVerificationRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me/send-email-verification", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceSendPhoneVerificationRequest generates requests for AuthServiceSendPhoneVerification
func NewAuthServiceSendPhoneVerificationRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me/send-phone-verification", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceVerifyEmailRequest calls the generic AuthServiceVerifyEmail builder with application/json body
func NewAuthServiceVerifyEmailRequest(server string, appId string, body AuthServiceVerifyEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthServiceVerifyEmailRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAuthServiceVerifyEmailRequestWithBody generates requests for AuthServiceVerifyEmail with any type of body
func NewAuthServiceVerifyEmailRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me/verify-email", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceVerifyPhoneRequest calls the generic AuthServiceVerifyPhone builder with application/json body
func NewAuthServiceVerifyPhoneRequest(server string, appId string, body AuthServiceVerifyPhoneJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthServiceVerifyPhoneRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAuthServiceVerifyPhoneRequestWithBody generates requests for AuthServiceVerifyPhone with any type of body
func NewAuthServiceVerifyPhoneRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/me/verify-phone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceSignInRequest calls the generic AuthServiceSignIn builder with application/json body
func NewAuthServiceSignInRequest(server string, appId string, body AuthServiceSignInJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthServiceSignInRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAuthServiceSignInRequestWithBody generates requests for AuthServiceSignIn with any type of body
func NewAuthServiceSignInRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/sign-in", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthServiceSignOutRequest generates requests for AuthServiceSignOut
func NewAuthServiceSignOutRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/sign-out", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthServiceSignUpRequest calls the generic AuthServiceSignUp builder with application/json body
func NewAuthServiceSignUpRequest(server string, appId string, body AuthServiceSignUpJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAuthServiceSignUpRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewAuthServiceSignUpRequestWithBody generates requests for AuthServiceSignUp with any type of body
func NewAuthServiceSignUpRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/auth/v1/sign-up", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContactServiceGetCareerApplicationsRequest generates requests for ContactServiceGetCareerApplications
func NewContactServiceGetCareerApplicationsRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/contact/v1/admin/career-applications", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactServiceGetContactRequestsRequest generates requests for ContactServiceGetContactRequests
func NewContactServiceGetContactRequestsRequest(server string, appId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/contact/v1/admin/contact-requests", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewContactServiceApplyCareerRequestWithBody generates requests for ContactServiceApplyCareer with any type of body
func NewContactServiceApplyCareerRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/contact/v1/careers/apply", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewContactServiceContactRequestRequest calls the generic ContactServiceContactRequest builder with application/json body
func NewContactServiceContactRequestRequest(server string, appId string, body ContactServiceContactRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewContactServiceContactRequestRequestWithBody(server, appId, "application/json", bodyReader)
}

// NewContactServiceContactRequestRequestWithBody generates requests for ContactServiceContactRequest with any type of body
func NewContactServiceContactRequestRequestWithBody(server string, appId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "appId", runtime.ParamLocationPath, appId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/contact/v1/contact", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BarbershopsAppGetAdminBusinessesWithResponse request
	BarbershopsAppGetAdminBusinessesWithResponse(ctx context.Context, params *BarbershopsAppGetAdminBusinessesParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetAdminBusinessesResponse, error)

	// BarbershopsAppGetCountriesWithResponse request
	BarbershopsAppGetCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BarbershopsAppGetCountriesResponse, error)

	// BarbershopsAppCreateCountryWithBodyWithResponse request with any body
	BarbershopsAppCreateCountryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateCountryResponse, error)

	BarbershopsAppCreateCountryWithResponse(ctx context.Context, body BarbershopsAppCreateCountryJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateCountryResponse, error)

	// BarbershopsAppGetBusinessesWithResponse request
	BarbershopsAppGetBusinessesWithResponse(ctx context.Context, params *BarbershopsAppGetBusinessesParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessesResponse, error)

	// BarbershopsAppDeleteBusinessWithResponse request
	BarbershopsAppDeleteBusinessWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteBusinessResponse, error)

	// BarbershopsAppGetBusinessWithResponse request
	BarbershopsAppGetBusinessWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessResponse, error)

	// BarbershopsAppUpdateBusinessWithBodyWithResponse request with any body
	BarbershopsAppUpdateBusinessWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessResponse, error)

	BarbershopsAppUpdateBusinessWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessResponse, error)

	// BarbershopsAppGetBusinessAvailabilityWithResponse request
	BarbershopsAppGetBusinessAvailabilityWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessAvailabilityParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessAvailabilityResponse, error)

	// BarbershopsAppGetBusinessBalanceWithResponse request
	BarbershopsAppGetBusinessBalanceWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessBalanceResponse, error)

	// BarbershopsAppBookWithBodyWithResponse request with any body
	BarbershopsAppBookWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppBookResponse, error)

	BarbershopsAppBookWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppBookJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppBookResponse, error)

	// BarbershopsAppSetupPaymentIntentWithBodyWithResponse request with any body
	BarbershopsAppSetupPaymentIntentWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppSetupPaymentIntentResponse, error)

	BarbershopsAppSetupPaymentIntentWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppSetupPaymentIntentJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppSetupPaymentIntentResponse, error)

	// BarbershopsAppGetBusinessBookingsWithResponse request
	BarbershopsAppGetBusinessBookingsWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessBookingsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessBookingsResponse, error)

	// BarbershopsAppRejectBusinessBookingWithResponse request
	BarbershopsAppRejectBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppRejectBusinessBookingResponse, error)

	// BarbershopsAppGetBusinessBookingWithResponse request
	BarbershopsAppGetBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessBookingResponse, error)

	// BarbershopsAppCancelBusinessBookingWithResponse request
	BarbershopsAppCancelBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppCancelBusinessBookingResponse, error)

	// BarbershopsAppConfirmBusinessBookingWithResponse request
	BarbershopsAppConfirmBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppConfirmBusinessBookingResponse, error)

	// BarbershopsAppCreateReviewWithBodyWithResponse request with any body
	BarbershopsAppCreateReviewWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateReviewResponse, error)

	BarbershopsAppCreateReviewWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, body BarbershopsAppCreateReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateReviewResponse, error)

	// BarbershopsAppGetBusinessMembersWithResponse request
	BarbershopsAppGetBusinessMembersWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessMembersResponse, error)

	// BarbershopsAppCreateBusinessMemberWithBodyWithResponse request with any body
	BarbershopsAppCreateBusinessMemberWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessMemberResponse, error)

	BarbershopsAppCreateBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, body BarbershopsAppCreateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessMemberResponse, error)

	// BarbershopsAppDeleteBusinessMemberWithResponse request
	BarbershopsAppDeleteBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteBusinessMemberResponse, error)

	// BarbershopsAppGetBusinessMemberWithResponse request
	BarbershopsAppGetBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessMemberResponse, error)

	// BarbershopsAppUpdateBusinessMemberWithBodyWithResponse request with any body
	BarbershopsAppUpdateBusinessMemberWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessMemberResponse, error)

	BarbershopsAppUpdateBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, body BarbershopsAppUpdateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessMemberResponse, error)

	// BarbershopsAppGetCustomersWithResponse request
	BarbershopsAppGetCustomersWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetCustomersResponse, error)

	// BarbershopsAppGetCustomerWithResponse request
	BarbershopsAppGetCustomerWithResponse(ctx context.Context, businessId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetCustomerResponse, error)

	// BarbershopsAppGetBusinessPhotosWithResponse request
	BarbershopsAppGetBusinessPhotosWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessPhotosResponse, error)

	// BarbershopsAppAddBusinessPhotoWithBodyWithResponse request with any body
	BarbershopsAppAddBusinessPhotoWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppAddBusinessPhotoResponse, error)

	BarbershopsAppAddBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppAddBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppAddBusinessPhotoResponse, error)

	// BarbershopsAppDeleteBusinessPhotoWithResponse request
	BarbershopsAppDeleteBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteBusinessPhotoResponse, error)

	// BarbershopsAppGetBusinessPhotoWithResponse request
	BarbershopsAppGetBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessPhotoResponse, error)

	// BarbershopsAppUpdateBusinessPhotoWithBodyWithResponse request with any body
	BarbershopsAppUpdateBusinessPhotoWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessPhotoResponse, error)

	BarbershopsAppUpdateBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, body BarbershopsAppUpdateBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessPhotoResponse, error)

	// BarbershopsAppGetBusinessRequirementsWithResponse request
	BarbershopsAppGetBusinessRequirementsWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessRequirementsResponse, error)

	// BarbershopsAppGetBusinessReviewsWithResponse request
	BarbershopsAppGetBusinessReviewsWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessReviewsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessReviewsResponse, error)

	// BarbershopsAppGetBusinessScheduleWithResponse request
	BarbershopsAppGetBusinessScheduleWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessScheduleResponse, error)

	// BarbershopsAppUpdateBusinessScheduleWithBodyWithResponse request with any body
	BarbershopsAppUpdateBusinessScheduleWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessScheduleResponse, error)

	BarbershopsAppUpdateBusinessScheduleWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessScheduleResponse, error)

	// BarbershopsAppGetServicesWithResponse request
	BarbershopsAppGetServicesWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetServicesResponse, error)

	// BarbershopsAppCreateServiceWithBodyWithResponse request with any body
	BarbershopsAppCreateServiceWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateServiceResponse, error)

	BarbershopsAppCreateServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, body BarbershopsAppCreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateServiceResponse, error)

	// BarbershopsAppDeleteServiceWithResponse request
	BarbershopsAppDeleteServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteServiceResponse, error)

	// BarbershopsAppGetServiceWithResponse request
	BarbershopsAppGetServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetServiceResponse, error)

	// BarbershopsAppUpdateServiceWithBodyWithResponse request with any body
	BarbershopsAppUpdateServiceWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateServiceResponse, error)

	BarbershopsAppUpdateServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, body BarbershopsAppUpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateServiceResponse, error)

	// BarbershopsAppGetBusinessSettingsWithResponse request
	BarbershopsAppGetBusinessSettingsWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessSettingsResponse, error)

	// BarbershopsAppUpdateBusinessSettingsWithBodyWithResponse request with any body
	BarbershopsAppUpdateBusinessSettingsWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessSettingsResponse, error)

	BarbershopsAppUpdateBusinessSettingsWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessSettingsResponse, error)

	// BarbershopsAppGetPublicBusinessSettingsWithResponse request
	BarbershopsAppGetPublicBusinessSettingsWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetPublicBusinessSettingsResponse, error)

	// BarbershopsAppGetMyBookingsWithResponse request
	BarbershopsAppGetMyBookingsWithResponse(ctx context.Context, params *BarbershopsAppGetMyBookingsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetMyBookingsResponse, error)

	// BarbershopsAppGetMyBusinessesWithResponse request
	BarbershopsAppGetMyBusinessesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BarbershopsAppGetMyBusinessesResponse, error)

	// BarbershopsAppCreateBusinessWithBodyWithResponse request with any body
	BarbershopsAppCreateBusinessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessResponse, error)

	BarbershopsAppCreateBusinessWithResponse(ctx context.Context, body BarbershopsAppCreateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessResponse, error)

	// BarbershopsAppGetMyReviewsWithResponse request
	BarbershopsAppGetMyReviewsWithResponse(ctx context.Context, params *BarbershopsAppGetMyReviewsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetMyReviewsResponse, error)

	// RadminAppGetAppsWithResponse request
	RadminAppGetAppsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RadminAppGetAppsResponse, error)

	// RadminAppCreateAppWithBodyWithResponse request with any body
	RadminAppCreateAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RadminAppCreateAppResponse, error)

	RadminAppCreateAppWithResponse(ctx context.Context, body RadminAppCreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*RadminAppCreateAppResponse, error)

	// RadminAppGetAppWithResponse request
	RadminAppGetAppWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*RadminAppGetAppResponse, error)

	// RadminAppUpdateAppWithBodyWithResponse request with any body
	RadminAppUpdateAppWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RadminAppUpdateAppResponse, error)

	RadminAppUpdateAppWithResponse(ctx context.Context, appId string, body RadminAppUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*RadminAppUpdateAppResponse, error)

	// AuthServiceGetAdminUsersWithResponse request
	AuthServiceGetAdminUsersWithResponse(ctx context.Context, appId string, params *AuthServiceGetAdminUsersParams, reqEditors ...RequestEditorFn) (*AuthServiceGetAdminUsersResponse, error)

	// AuthServiceGoogleSignInCallbackWithResponse request
	AuthServiceGoogleSignInCallbackWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceGoogleSignInCallbackResponse, error)

	// AuthServiceGoogleSignInWithResponse request
	AuthServiceGoogleSignInWithResponse(ctx context.Context, appId string, params *AuthServiceGoogleSignInParams, reqEditors ...RequestEditorFn) (*AuthServiceGoogleSignInResponse, error)

	// AuthServiceGetCurrentUserWithResponse request
	AuthServiceGetCurrentUserWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceGetCurrentUserResponse, error)

	// AuthServiceUpdateCurrentUserWithBodyWithResponse request with any body
	AuthServiceUpdateCurrentUserWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceUpdateCurrentUserResponse, error)

	// AuthServiceForgotPasswordWithBodyWithResponse request with any body
	AuthServiceForgotPasswordWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceForgotPasswordResponse, error)

	AuthServiceForgotPasswordWithResponse(ctx context.Context, appId string, body AuthServiceForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceForgotPasswordResponse, error)

	// AuthServiceResetPasswordWithBodyWithResponse request with any body
	AuthServiceResetPasswordWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceResetPasswordResponse, error)

	AuthServiceResetPasswordWithResponse(ctx context.Context, appId string, body AuthServiceResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceResetPasswordResponse, error)

	// AuthServiceSendEmailVerificationWithResponse request
	AuthServiceSendEmailVerificationWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceSendEmailVerificationResponse, error)

	// AuthServiceSendPhoneVerificationWithResponse request
	AuthServiceSendPhoneVerificationWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceSendPhoneVerificationResponse, error)

	// AuthServiceVerifyEmailWithBodyWithResponse request with any body
	AuthServiceVerifyEmailWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceVerifyEmailResponse, error)

	AuthServiceVerifyEmailWithResponse(ctx context.Context, appId string, body AuthServiceVerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceVerifyEmailResponse, error)

	// AuthServiceVerifyPhoneWithBodyWithResponse request with any body
	AuthServiceVerifyPhoneWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceVerifyPhoneResponse, error)

	AuthServiceVerifyPhoneWithResponse(ctx context.Context, appId string, body AuthServiceVerifyPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceVerifyPhoneResponse, error)

	// AuthServiceSignInWithBodyWithResponse request with any body
	AuthServiceSignInWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceSignInResponse, error)

	AuthServiceSignInWithResponse(ctx context.Context, appId string, body AuthServiceSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceSignInResponse, error)

	// AuthServiceSignOutWithResponse request
	AuthServiceSignOutWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceSignOutResponse, error)

	// AuthServiceSignUpWithBodyWithResponse request with any body
	AuthServiceSignUpWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceSignUpResponse, error)

	AuthServiceSignUpWithResponse(ctx context.Context, appId string, body AuthServiceSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceSignUpResponse, error)

	// ContactServiceGetCareerApplicationsWithResponse request
	ContactServiceGetCareerApplicationsWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ContactServiceGetCareerApplicationsResponse, error)

	// ContactServiceGetContactRequestsWithResponse request
	ContactServiceGetContactRequestsWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ContactServiceGetContactRequestsResponse, error)

	// ContactServiceApplyCareerWithBodyWithResponse request with any body
	ContactServiceApplyCareerWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactServiceApplyCareerResponse, error)

	// ContactServiceContactRequestWithBodyWithResponse request with any body
	ContactServiceContactRequestWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactServiceContactRequestResponse, error)

	ContactServiceContactRequestWithResponse(ctx context.Context, appId string, body ContactServiceContactRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactServiceContactRequestResponse, error)
}

type BarbershopsAppGetAdminBusinessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBusiness
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetAdminBusinessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetAdminBusinessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppCountry
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppCreateCountryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppCountry
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppCreateCountryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppCreateCountryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBusiness
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppDeleteBusinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppDeleteBusinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppDeleteBusinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusiness
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppUpdateBusinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusiness
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppUpdateBusinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppUpdateBusinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppSlot
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessBalance
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBooking
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppSetupPaymentIntentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppPaymentIntent
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppSetupPaymentIntentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppSetupPaymentIntentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessBookingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBooking
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessBookingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessBookingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppRejectBusinessBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppRejectBusinessBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppRejectBusinessBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBooking
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppCancelBusinessBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBooking
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppCancelBusinessBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppCancelBusinessBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppConfirmBusinessBookingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBooking
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppConfirmBusinessBookingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppConfirmBusinessBookingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppCreateReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppReview
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppCreateReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppCreateReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBusinessMember
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppCreateBusinessMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessMember
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppCreateBusinessMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppCreateBusinessMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppDeleteBusinessMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppDeleteBusinessMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppDeleteBusinessMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessMember
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppUpdateBusinessMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessMember
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppUpdateBusinessMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppUpdateBusinessMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppCustomer
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppCustomer
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessPhotosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBusinessPhoto
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessPhotosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessPhotosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppAddBusinessPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessPhoto
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppAddBusinessPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppAddBusinessPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppDeleteBusinessPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppDeleteBusinessPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppDeleteBusinessPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessPhoto
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppUpdateBusinessPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessPhoto
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppUpdateBusinessPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppUpdateBusinessPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessRequirementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessRequirements
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessRequirementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessRequirementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppReview
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessSchedule
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppUpdateBusinessScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessSchedule
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppUpdateBusinessScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppUpdateBusinessScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppServiceType
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppCreateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppServiceType
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppCreateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppCreateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppDeleteServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppDeleteServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppDeleteServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppServiceType
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppUpdateServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppServiceType
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppUpdateServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppUpdateServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetBusinessSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessSettings
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetBusinessSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetBusinessSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppUpdateBusinessSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusinessSettings
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppUpdateBusinessSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppUpdateBusinessSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetPublicBusinessSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppPublicBusinessSettings
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetPublicBusinessSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetPublicBusinessSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetMyBookingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBooking
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetMyBookingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetMyBookingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetMyBusinessesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppBusiness
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetMyBusinessesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetMyBusinessesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppCreateBusinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BarbershopsAppBusiness
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppCreateBusinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppCreateBusinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BarbershopsAppGetMyReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BarbershopsAppReview
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r BarbershopsAppGetMyReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BarbershopsAppGetMyReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RadminAppGetAppsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RadminAppApp
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r RadminAppGetAppsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RadminAppGetAppsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RadminAppCreateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RadminAppApp
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r RadminAppCreateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RadminAppCreateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RadminAppGetAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RadminAppApp
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r RadminAppGetAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RadminAppGetAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RadminAppUpdateAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RadminAppApp
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r RadminAppUpdateAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RadminAppUpdateAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceGetAdminUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AuthServiceUser
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceGetAdminUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceGetAdminUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceGoogleSignInCallbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceGoogleSignInCallbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceGoogleSignInCallbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceGoogleSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceGoogleSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceGoogleSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceGetCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthServiceUser
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceGetCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceGetCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceUpdateCurrentUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthServiceUser
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceUpdateCurrentUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceUpdateCurrentUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceForgotPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceForgotPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceForgotPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceResetPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceResetPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceResetPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceSendEmailVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceSendEmailVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceSendEmailVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceSendPhoneVerificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceSendPhoneVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceSendPhoneVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceVerifyEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceVerifyEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceVerifyEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceVerifyPhoneResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceVerifyPhoneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceVerifyPhoneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceSignInResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceSignInResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceSignInResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceSignOutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceSignOutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceSignOutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthServiceSignUpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r AuthServiceSignUpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthServiceSignUpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactServiceGetCareerApplicationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContactServiceCareerApplication
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r ContactServiceGetCareerApplicationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactServiceGetCareerApplicationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactServiceGetContactRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ContactServiceContactRequest
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r ContactServiceGetContactRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactServiceGetContactRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactServiceApplyCareerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r ContactServiceApplyCareerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactServiceApplyCareerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ContactServiceContactRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *ApiError
	JSON401      *ApiError
	JSON403      *ApiError
	JSON404      *ApiError
	JSON500      *ApiError
}

// Status returns HTTPResponse.Status
func (r ContactServiceContactRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ContactServiceContactRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BarbershopsAppGetAdminBusinessesWithResponse request returning *BarbershopsAppGetAdminBusinessesResponse
func (c *ClientWithResponses) BarbershopsAppGetAdminBusinessesWithResponse(ctx context.Context, params *BarbershopsAppGetAdminBusinessesParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetAdminBusinessesResponse, error) {
	rsp, err := c.BarbershopsAppGetAdminBusinesses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetAdminBusinessesResponse(rsp)
}

// BarbershopsAppGetCountriesWithResponse request returning *BarbershopsAppGetCountriesResponse
func (c *ClientWithResponses) BarbershopsAppGetCountriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BarbershopsAppGetCountriesResponse, error) {
	rsp, err := c.BarbershopsAppGetCountries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetCountriesResponse(rsp)
}

// BarbershopsAppCreateCountryWithBodyWithResponse request with arbitrary body returning *BarbershopsAppCreateCountryResponse
func (c *ClientWithResponses) BarbershopsAppCreateCountryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateCountryResponse, error) {
	rsp, err := c.BarbershopsAppCreateCountryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateCountryResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppCreateCountryWithResponse(ctx context.Context, body BarbershopsAppCreateCountryJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateCountryResponse, error) {
	rsp, err := c.BarbershopsAppCreateCountry(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateCountryResponse(rsp)
}

// BarbershopsAppGetBusinessesWithResponse request returning *BarbershopsAppGetBusinessesResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessesWithResponse(ctx context.Context, params *BarbershopsAppGetBusinessesParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessesResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinesses(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessesResponse(rsp)
}

// BarbershopsAppDeleteBusinessWithResponse request returning *BarbershopsAppDeleteBusinessResponse
func (c *ClientWithResponses) BarbershopsAppDeleteBusinessWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteBusinessResponse, error) {
	rsp, err := c.BarbershopsAppDeleteBusiness(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppDeleteBusinessResponse(rsp)
}

// BarbershopsAppGetBusinessWithResponse request returning *BarbershopsAppGetBusinessResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessResponse, error) {
	rsp, err := c.BarbershopsAppGetBusiness(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessResponse(rsp)
}

// BarbershopsAppUpdateBusinessWithBodyWithResponse request with arbitrary body returning *BarbershopsAppUpdateBusinessResponse
func (c *ClientWithResponses) BarbershopsAppUpdateBusinessWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessWithBody(ctx, businessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppUpdateBusinessWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusiness(ctx, businessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessResponse(rsp)
}

// BarbershopsAppGetBusinessAvailabilityWithResponse request returning *BarbershopsAppGetBusinessAvailabilityResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessAvailabilityWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessAvailabilityParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessAvailabilityResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessAvailability(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessAvailabilityResponse(rsp)
}

// BarbershopsAppGetBusinessBalanceWithResponse request returning *BarbershopsAppGetBusinessBalanceResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessBalanceWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessBalanceResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessBalance(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessBalanceResponse(rsp)
}

// BarbershopsAppBookWithBodyWithResponse request with arbitrary body returning *BarbershopsAppBookResponse
func (c *ClientWithResponses) BarbershopsAppBookWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppBookResponse, error) {
	rsp, err := c.BarbershopsAppBookWithBody(ctx, businessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppBookResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppBookWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppBookJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppBookResponse, error) {
	rsp, err := c.BarbershopsAppBook(ctx, businessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppBookResponse(rsp)
}

// BarbershopsAppSetupPaymentIntentWithBodyWithResponse request with arbitrary body returning *BarbershopsAppSetupPaymentIntentResponse
func (c *ClientWithResponses) BarbershopsAppSetupPaymentIntentWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppSetupPaymentIntentResponse, error) {
	rsp, err := c.BarbershopsAppSetupPaymentIntentWithBody(ctx, businessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppSetupPaymentIntentResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppSetupPaymentIntentWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppSetupPaymentIntentJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppSetupPaymentIntentResponse, error) {
	rsp, err := c.BarbershopsAppSetupPaymentIntent(ctx, businessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppSetupPaymentIntentResponse(rsp)
}

// BarbershopsAppGetBusinessBookingsWithResponse request returning *BarbershopsAppGetBusinessBookingsResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessBookingsWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessBookingsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessBookingsResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessBookings(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessBookingsResponse(rsp)
}

// BarbershopsAppRejectBusinessBookingWithResponse request returning *BarbershopsAppRejectBusinessBookingResponse
func (c *ClientWithResponses) BarbershopsAppRejectBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppRejectBusinessBookingResponse, error) {
	rsp, err := c.BarbershopsAppRejectBusinessBooking(ctx, businessId, bookingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppRejectBusinessBookingResponse(rsp)
}

// BarbershopsAppGetBusinessBookingWithResponse request returning *BarbershopsAppGetBusinessBookingResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessBookingResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessBooking(ctx, businessId, bookingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessBookingResponse(rsp)
}

// BarbershopsAppCancelBusinessBookingWithResponse request returning *BarbershopsAppCancelBusinessBookingResponse
func (c *ClientWithResponses) BarbershopsAppCancelBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppCancelBusinessBookingResponse, error) {
	rsp, err := c.BarbershopsAppCancelBusinessBooking(ctx, businessId, bookingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCancelBusinessBookingResponse(rsp)
}

// BarbershopsAppConfirmBusinessBookingWithResponse request returning *BarbershopsAppConfirmBusinessBookingResponse
func (c *ClientWithResponses) BarbershopsAppConfirmBusinessBookingWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppConfirmBusinessBookingResponse, error) {
	rsp, err := c.BarbershopsAppConfirmBusinessBooking(ctx, businessId, bookingId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppConfirmBusinessBookingResponse(rsp)
}

// BarbershopsAppCreateReviewWithBodyWithResponse request with arbitrary body returning *BarbershopsAppCreateReviewResponse
func (c *ClientWithResponses) BarbershopsAppCreateReviewWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateReviewResponse, error) {
	rsp, err := c.BarbershopsAppCreateReviewWithBody(ctx, businessId, bookingId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateReviewResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppCreateReviewWithResponse(ctx context.Context, businessId openapi_types.UUID, bookingId openapi_types.UUID, body BarbershopsAppCreateReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateReviewResponse, error) {
	rsp, err := c.BarbershopsAppCreateReview(ctx, businessId, bookingId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateReviewResponse(rsp)
}

// BarbershopsAppGetBusinessMembersWithResponse request returning *BarbershopsAppGetBusinessMembersResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessMembersWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessMembersResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessMembers(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessMembersResponse(rsp)
}

// BarbershopsAppCreateBusinessMemberWithBodyWithResponse request with arbitrary body returning *BarbershopsAppCreateBusinessMemberResponse
func (c *ClientWithResponses) BarbershopsAppCreateBusinessMemberWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessMemberResponse, error) {
	rsp, err := c.BarbershopsAppCreateBusinessMemberWithBody(ctx, businessId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateBusinessMemberResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppCreateBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateBusinessMemberParams, body BarbershopsAppCreateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessMemberResponse, error) {
	rsp, err := c.BarbershopsAppCreateBusinessMember(ctx, businessId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateBusinessMemberResponse(rsp)
}

// BarbershopsAppDeleteBusinessMemberWithResponse request returning *BarbershopsAppDeleteBusinessMemberResponse
func (c *ClientWithResponses) BarbershopsAppDeleteBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteBusinessMemberResponse, error) {
	rsp, err := c.BarbershopsAppDeleteBusinessMember(ctx, businessId, businessMemberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppDeleteBusinessMemberResponse(rsp)
}

// BarbershopsAppGetBusinessMemberWithResponse request returning *BarbershopsAppGetBusinessMemberResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessMemberResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessMember(ctx, businessId, businessMemberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessMemberResponse(rsp)
}

// BarbershopsAppUpdateBusinessMemberWithBodyWithResponse request with arbitrary body returning *BarbershopsAppUpdateBusinessMemberResponse
func (c *ClientWithResponses) BarbershopsAppUpdateBusinessMemberWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessMemberResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessMemberWithBody(ctx, businessId, businessMemberId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessMemberResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppUpdateBusinessMemberWithResponse(ctx context.Context, businessId openapi_types.UUID, businessMemberId openapi_types.UUID, body BarbershopsAppUpdateBusinessMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessMemberResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessMember(ctx, businessId, businessMemberId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessMemberResponse(rsp)
}

// BarbershopsAppGetCustomersWithResponse request returning *BarbershopsAppGetCustomersResponse
func (c *ClientWithResponses) BarbershopsAppGetCustomersWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetCustomersResponse, error) {
	rsp, err := c.BarbershopsAppGetCustomers(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetCustomersResponse(rsp)
}

// BarbershopsAppGetCustomerWithResponse request returning *BarbershopsAppGetCustomerResponse
func (c *ClientWithResponses) BarbershopsAppGetCustomerWithResponse(ctx context.Context, businessId openapi_types.UUID, customerId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetCustomerResponse, error) {
	rsp, err := c.BarbershopsAppGetCustomer(ctx, businessId, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetCustomerResponse(rsp)
}

// BarbershopsAppGetBusinessPhotosWithResponse request returning *BarbershopsAppGetBusinessPhotosResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessPhotosWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessPhotosResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessPhotos(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessPhotosResponse(rsp)
}

// BarbershopsAppAddBusinessPhotoWithBodyWithResponse request with arbitrary body returning *BarbershopsAppAddBusinessPhotoResponse
func (c *ClientWithResponses) BarbershopsAppAddBusinessPhotoWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppAddBusinessPhotoResponse, error) {
	rsp, err := c.BarbershopsAppAddBusinessPhotoWithBody(ctx, businessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppAddBusinessPhotoResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppAddBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppAddBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppAddBusinessPhotoResponse, error) {
	rsp, err := c.BarbershopsAppAddBusinessPhoto(ctx, businessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppAddBusinessPhotoResponse(rsp)
}

// BarbershopsAppDeleteBusinessPhotoWithResponse request returning *BarbershopsAppDeleteBusinessPhotoResponse
func (c *ClientWithResponses) BarbershopsAppDeleteBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteBusinessPhotoResponse, error) {
	rsp, err := c.BarbershopsAppDeleteBusinessPhoto(ctx, businessId, photoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppDeleteBusinessPhotoResponse(rsp)
}

// BarbershopsAppGetBusinessPhotoWithResponse request returning *BarbershopsAppGetBusinessPhotoResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessPhotoResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessPhoto(ctx, businessId, photoId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessPhotoResponse(rsp)
}

// BarbershopsAppUpdateBusinessPhotoWithBodyWithResponse request with arbitrary body returning *BarbershopsAppUpdateBusinessPhotoResponse
func (c *ClientWithResponses) BarbershopsAppUpdateBusinessPhotoWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessPhotoResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessPhotoWithBody(ctx, businessId, photoId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessPhotoResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppUpdateBusinessPhotoWithResponse(ctx context.Context, businessId openapi_types.UUID, photoId openapi_types.UUID, body BarbershopsAppUpdateBusinessPhotoJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessPhotoResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessPhoto(ctx, businessId, photoId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessPhotoResponse(rsp)
}

// BarbershopsAppGetBusinessRequirementsWithResponse request returning *BarbershopsAppGetBusinessRequirementsResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessRequirementsWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessRequirementsResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessRequirements(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessRequirementsResponse(rsp)
}

// BarbershopsAppGetBusinessReviewsWithResponse request returning *BarbershopsAppGetBusinessReviewsResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessReviewsWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppGetBusinessReviewsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessReviewsResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessReviews(ctx, businessId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessReviewsResponse(rsp)
}

// BarbershopsAppGetBusinessScheduleWithResponse request returning *BarbershopsAppGetBusinessScheduleResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessScheduleWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessScheduleResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessSchedule(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessScheduleResponse(rsp)
}

// BarbershopsAppUpdateBusinessScheduleWithBodyWithResponse request with arbitrary body returning *BarbershopsAppUpdateBusinessScheduleResponse
func (c *ClientWithResponses) BarbershopsAppUpdateBusinessScheduleWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessScheduleResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessScheduleWithBody(ctx, businessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessScheduleResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppUpdateBusinessScheduleWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessScheduleResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessSchedule(ctx, businessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessScheduleResponse(rsp)
}

// BarbershopsAppGetServicesWithResponse request returning *BarbershopsAppGetServicesResponse
func (c *ClientWithResponses) BarbershopsAppGetServicesWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetServicesResponse, error) {
	rsp, err := c.BarbershopsAppGetServices(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetServicesResponse(rsp)
}

// BarbershopsAppCreateServiceWithBodyWithResponse request with arbitrary body returning *BarbershopsAppCreateServiceResponse
func (c *ClientWithResponses) BarbershopsAppCreateServiceWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateServiceResponse, error) {
	rsp, err := c.BarbershopsAppCreateServiceWithBody(ctx, businessId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateServiceResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppCreateServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, params *BarbershopsAppCreateServiceParams, body BarbershopsAppCreateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateServiceResponse, error) {
	rsp, err := c.BarbershopsAppCreateService(ctx, businessId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateServiceResponse(rsp)
}

// BarbershopsAppDeleteServiceWithResponse request returning *BarbershopsAppDeleteServiceResponse
func (c *ClientWithResponses) BarbershopsAppDeleteServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppDeleteServiceResponse, error) {
	rsp, err := c.BarbershopsAppDeleteService(ctx, businessId, serviceTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppDeleteServiceResponse(rsp)
}

// BarbershopsAppGetServiceWithResponse request returning *BarbershopsAppGetServiceResponse
func (c *ClientWithResponses) BarbershopsAppGetServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetServiceResponse, error) {
	rsp, err := c.BarbershopsAppGetService(ctx, businessId, serviceTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetServiceResponse(rsp)
}

// BarbershopsAppUpdateServiceWithBodyWithResponse request with arbitrary body returning *BarbershopsAppUpdateServiceResponse
func (c *ClientWithResponses) BarbershopsAppUpdateServiceWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateServiceResponse, error) {
	rsp, err := c.BarbershopsAppUpdateServiceWithBody(ctx, businessId, serviceTypeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateServiceResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppUpdateServiceWithResponse(ctx context.Context, businessId openapi_types.UUID, serviceTypeId openapi_types.UUID, body BarbershopsAppUpdateServiceJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateServiceResponse, error) {
	rsp, err := c.BarbershopsAppUpdateService(ctx, businessId, serviceTypeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateServiceResponse(rsp)
}

// BarbershopsAppGetBusinessSettingsWithResponse request returning *BarbershopsAppGetBusinessSettingsResponse
func (c *ClientWithResponses) BarbershopsAppGetBusinessSettingsWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetBusinessSettingsResponse, error) {
	rsp, err := c.BarbershopsAppGetBusinessSettings(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetBusinessSettingsResponse(rsp)
}

// BarbershopsAppUpdateBusinessSettingsWithBodyWithResponse request with arbitrary body returning *BarbershopsAppUpdateBusinessSettingsResponse
func (c *ClientWithResponses) BarbershopsAppUpdateBusinessSettingsWithBodyWithResponse(ctx context.Context, businessId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessSettingsResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessSettingsWithBody(ctx, businessId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessSettingsResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppUpdateBusinessSettingsWithResponse(ctx context.Context, businessId openapi_types.UUID, body BarbershopsAppUpdateBusinessSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppUpdateBusinessSettingsResponse, error) {
	rsp, err := c.BarbershopsAppUpdateBusinessSettings(ctx, businessId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppUpdateBusinessSettingsResponse(rsp)
}

// BarbershopsAppGetPublicBusinessSettingsWithResponse request returning *BarbershopsAppGetPublicBusinessSettingsResponse
func (c *ClientWithResponses) BarbershopsAppGetPublicBusinessSettingsWithResponse(ctx context.Context, businessId openapi_types.UUID, reqEditors ...RequestEditorFn) (*BarbershopsAppGetPublicBusinessSettingsResponse, error) {
	rsp, err := c.BarbershopsAppGetPublicBusinessSettings(ctx, businessId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetPublicBusinessSettingsResponse(rsp)
}

// BarbershopsAppGetMyBookingsWithResponse request returning *BarbershopsAppGetMyBookingsResponse
func (c *ClientWithResponses) BarbershopsAppGetMyBookingsWithResponse(ctx context.Context, params *BarbershopsAppGetMyBookingsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetMyBookingsResponse, error) {
	rsp, err := c.BarbershopsAppGetMyBookings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetMyBookingsResponse(rsp)
}

// BarbershopsAppGetMyBusinessesWithResponse request returning *BarbershopsAppGetMyBusinessesResponse
func (c *ClientWithResponses) BarbershopsAppGetMyBusinessesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BarbershopsAppGetMyBusinessesResponse, error) {
	rsp, err := c.BarbershopsAppGetMyBusinesses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetMyBusinessesResponse(rsp)
}

// BarbershopsAppCreateBusinessWithBodyWithResponse request with arbitrary body returning *BarbershopsAppCreateBusinessResponse
func (c *ClientWithResponses) BarbershopsAppCreateBusinessWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessResponse, error) {
	rsp, err := c.BarbershopsAppCreateBusinessWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateBusinessResponse(rsp)
}

func (c *ClientWithResponses) BarbershopsAppCreateBusinessWithResponse(ctx context.Context, body BarbershopsAppCreateBusinessJSONRequestBody, reqEditors ...RequestEditorFn) (*BarbershopsAppCreateBusinessResponse, error) {
	rsp, err := c.BarbershopsAppCreateBusiness(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppCreateBusinessResponse(rsp)
}

// BarbershopsAppGetMyReviewsWithResponse request returning *BarbershopsAppGetMyReviewsResponse
func (c *ClientWithResponses) BarbershopsAppGetMyReviewsWithResponse(ctx context.Context, params *BarbershopsAppGetMyReviewsParams, reqEditors ...RequestEditorFn) (*BarbershopsAppGetMyReviewsResponse, error) {
	rsp, err := c.BarbershopsAppGetMyReviews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBarbershopsAppGetMyReviewsResponse(rsp)
}

// RadminAppGetAppsWithResponse request returning *RadminAppGetAppsResponse
func (c *ClientWithResponses) RadminAppGetAppsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RadminAppGetAppsResponse, error) {
	rsp, err := c.RadminAppGetApps(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRadminAppGetAppsResponse(rsp)
}

// RadminAppCreateAppWithBodyWithResponse request with arbitrary body returning *RadminAppCreateAppResponse
func (c *ClientWithResponses) RadminAppCreateAppWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RadminAppCreateAppResponse, error) {
	rsp, err := c.RadminAppCreateAppWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRadminAppCreateAppResponse(rsp)
}

func (c *ClientWithResponses) RadminAppCreateAppWithResponse(ctx context.Context, body RadminAppCreateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*RadminAppCreateAppResponse, error) {
	rsp, err := c.RadminAppCreateApp(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRadminAppCreateAppResponse(rsp)
}

// RadminAppGetAppWithResponse request returning *RadminAppGetAppResponse
func (c *ClientWithResponses) RadminAppGetAppWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*RadminAppGetAppResponse, error) {
	rsp, err := c.RadminAppGetApp(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRadminAppGetAppResponse(rsp)
}

// RadminAppUpdateAppWithBodyWithResponse request with arbitrary body returning *RadminAppUpdateAppResponse
func (c *ClientWithResponses) RadminAppUpdateAppWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RadminAppUpdateAppResponse, error) {
	rsp, err := c.RadminAppUpdateAppWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRadminAppUpdateAppResponse(rsp)
}

func (c *ClientWithResponses) RadminAppUpdateAppWithResponse(ctx context.Context, appId string, body RadminAppUpdateAppJSONRequestBody, reqEditors ...RequestEditorFn) (*RadminAppUpdateAppResponse, error) {
	rsp, err := c.RadminAppUpdateApp(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRadminAppUpdateAppResponse(rsp)
}

// AuthServiceGetAdminUsersWithResponse request returning *AuthServiceGetAdminUsersResponse
func (c *ClientWithResponses) AuthServiceGetAdminUsersWithResponse(ctx context.Context, appId string, params *AuthServiceGetAdminUsersParams, reqEditors ...RequestEditorFn) (*AuthServiceGetAdminUsersResponse, error) {
	rsp, err := c.AuthServiceGetAdminUsers(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceGetAdminUsersResponse(rsp)
}

// AuthServiceGoogleSignInCallbackWithResponse request returning *AuthServiceGoogleSignInCallbackResponse
func (c *ClientWithResponses) AuthServiceGoogleSignInCallbackWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceGoogleSignInCallbackResponse, error) {
	rsp, err := c.AuthServiceGoogleSignInCallback(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceGoogleSignInCallbackResponse(rsp)
}

// AuthServiceGoogleSignInWithResponse request returning *AuthServiceGoogleSignInResponse
func (c *ClientWithResponses) AuthServiceGoogleSignInWithResponse(ctx context.Context, appId string, params *AuthServiceGoogleSignInParams, reqEditors ...RequestEditorFn) (*AuthServiceGoogleSignInResponse, error) {
	rsp, err := c.AuthServiceGoogleSignIn(ctx, appId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceGoogleSignInResponse(rsp)
}

// AuthServiceGetCurrentUserWithResponse request returning *AuthServiceGetCurrentUserResponse
func (c *ClientWithResponses) AuthServiceGetCurrentUserWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceGetCurrentUserResponse, error) {
	rsp, err := c.AuthServiceGetCurrentUser(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceGetCurrentUserResponse(rsp)
}

// AuthServiceUpdateCurrentUserWithBodyWithResponse request with arbitrary body returning *AuthServiceUpdateCurrentUserResponse
func (c *ClientWithResponses) AuthServiceUpdateCurrentUserWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceUpdateCurrentUserResponse, error) {
	rsp, err := c.AuthServiceUpdateCurrentUserWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceUpdateCurrentUserResponse(rsp)
}

// AuthServiceForgotPasswordWithBodyWithResponse request with arbitrary body returning *AuthServiceForgotPasswordResponse
func (c *ClientWithResponses) AuthServiceForgotPasswordWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceForgotPasswordResponse, error) {
	rsp, err := c.AuthServiceForgotPasswordWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceForgotPasswordResponse(rsp)
}

func (c *ClientWithResponses) AuthServiceForgotPasswordWithResponse(ctx context.Context, appId string, body AuthServiceForgotPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceForgotPasswordResponse, error) {
	rsp, err := c.AuthServiceForgotPassword(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceForgotPasswordResponse(rsp)
}

// AuthServiceResetPasswordWithBodyWithResponse request with arbitrary body returning *AuthServiceResetPasswordResponse
func (c *ClientWithResponses) AuthServiceResetPasswordWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceResetPasswordResponse, error) {
	rsp, err := c.AuthServiceResetPasswordWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceResetPasswordResponse(rsp)
}

func (c *ClientWithResponses) AuthServiceResetPasswordWithResponse(ctx context.Context, appId string, body AuthServiceResetPasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceResetPasswordResponse, error) {
	rsp, err := c.AuthServiceResetPassword(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceResetPasswordResponse(rsp)
}

// AuthServiceSendEmailVerificationWithResponse request returning *AuthServiceSendEmailVerificationResponse
func (c *ClientWithResponses) AuthServiceSendEmailVerificationWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceSendEmailVerificationResponse, error) {
	rsp, err := c.AuthServiceSendEmailVerification(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSendEmailVerificationResponse(rsp)
}

// AuthServiceSendPhoneVerificationWithResponse request returning *AuthServiceSendPhoneVerificationResponse
func (c *ClientWithResponses) AuthServiceSendPhoneVerificationWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceSendPhoneVerificationResponse, error) {
	rsp, err := c.AuthServiceSendPhoneVerification(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSendPhoneVerificationResponse(rsp)
}

// AuthServiceVerifyEmailWithBodyWithResponse request with arbitrary body returning *AuthServiceVerifyEmailResponse
func (c *ClientWithResponses) AuthServiceVerifyEmailWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceVerifyEmailResponse, error) {
	rsp, err := c.AuthServiceVerifyEmailWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceVerifyEmailResponse(rsp)
}

func (c *ClientWithResponses) AuthServiceVerifyEmailWithResponse(ctx context.Context, appId string, body AuthServiceVerifyEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceVerifyEmailResponse, error) {
	rsp, err := c.AuthServiceVerifyEmail(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceVerifyEmailResponse(rsp)
}

// AuthServiceVerifyPhoneWithBodyWithResponse request with arbitrary body returning *AuthServiceVerifyPhoneResponse
func (c *ClientWithResponses) AuthServiceVerifyPhoneWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceVerifyPhoneResponse, error) {
	rsp, err := c.AuthServiceVerifyPhoneWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceVerifyPhoneResponse(rsp)
}

func (c *ClientWithResponses) AuthServiceVerifyPhoneWithResponse(ctx context.Context, appId string, body AuthServiceVerifyPhoneJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceVerifyPhoneResponse, error) {
	rsp, err := c.AuthServiceVerifyPhone(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceVerifyPhoneResponse(rsp)
}

// AuthServiceSignInWithBodyWithResponse request with arbitrary body returning *AuthServiceSignInResponse
func (c *ClientWithResponses) AuthServiceSignInWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceSignInResponse, error) {
	rsp, err := c.AuthServiceSignInWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSignInResponse(rsp)
}

func (c *ClientWithResponses) AuthServiceSignInWithResponse(ctx context.Context, appId string, body AuthServiceSignInJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceSignInResponse, error) {
	rsp, err := c.AuthServiceSignIn(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSignInResponse(rsp)
}

// AuthServiceSignOutWithResponse request returning *AuthServiceSignOutResponse
func (c *ClientWithResponses) AuthServiceSignOutWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*AuthServiceSignOutResponse, error) {
	rsp, err := c.AuthServiceSignOut(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSignOutResponse(rsp)
}

// AuthServiceSignUpWithBodyWithResponse request with arbitrary body returning *AuthServiceSignUpResponse
func (c *ClientWithResponses) AuthServiceSignUpWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AuthServiceSignUpResponse, error) {
	rsp, err := c.AuthServiceSignUpWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSignUpResponse(rsp)
}

func (c *ClientWithResponses) AuthServiceSignUpWithResponse(ctx context.Context, appId string, body AuthServiceSignUpJSONRequestBody, reqEditors ...RequestEditorFn) (*AuthServiceSignUpResponse, error) {
	rsp, err := c.AuthServiceSignUp(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthServiceSignUpResponse(rsp)
}

// ContactServiceGetCareerApplicationsWithResponse request returning *ContactServiceGetCareerApplicationsResponse
func (c *ClientWithResponses) ContactServiceGetCareerApplicationsWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ContactServiceGetCareerApplicationsResponse, error) {
	rsp, err := c.ContactServiceGetCareerApplications(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactServiceGetCareerApplicationsResponse(rsp)
}

// ContactServiceGetContactRequestsWithResponse request returning *ContactServiceGetContactRequestsResponse
func (c *ClientWithResponses) ContactServiceGetContactRequestsWithResponse(ctx context.Context, appId string, reqEditors ...RequestEditorFn) (*ContactServiceGetContactRequestsResponse, error) {
	rsp, err := c.ContactServiceGetContactRequests(ctx, appId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactServiceGetContactRequestsResponse(rsp)
}

// ContactServiceApplyCareerWithBodyWithResponse request with arbitrary body returning *ContactServiceApplyCareerResponse
func (c *ClientWithResponses) ContactServiceApplyCareerWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactServiceApplyCareerResponse, error) {
	rsp, err := c.ContactServiceApplyCareerWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactServiceApplyCareerResponse(rsp)
}

// ContactServiceContactRequestWithBodyWithResponse request with arbitrary body returning *ContactServiceContactRequestResponse
func (c *ClientWithResponses) ContactServiceContactRequestWithBodyWithResponse(ctx context.Context, appId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ContactServiceContactRequestResponse, error) {
	rsp, err := c.ContactServiceContactRequestWithBody(ctx, appId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactServiceContactRequestResponse(rsp)
}

func (c *ClientWithResponses) ContactServiceContactRequestWithResponse(ctx context.Context, appId string, body ContactServiceContactRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*ContactServiceContactRequestResponse, error) {
	rsp, err := c.ContactServiceContactRequest(ctx, appId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseContactServiceContactRequestResponse(rsp)
}

// ParseBarbershopsAppGetAdminBusinessesResponse parses an HTTP response from a BarbershopsAppGetAdminBusinessesWithResponse call
func ParseBarbershopsAppGetAdminBusinessesResponse(rsp *http.Response) (*BarbershopsAppGetAdminBusinessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetAdminBusinessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBusiness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetCountriesResponse parses an HTTP response from a BarbershopsAppGetCountriesWithResponse call
func ParseBarbershopsAppGetCountriesResponse(rsp *http.Response) (*BarbershopsAppGetCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppCountry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppCreateCountryResponse parses an HTTP response from a BarbershopsAppCreateCountryWithResponse call
func ParseBarbershopsAppCreateCountryResponse(rsp *http.Response) (*BarbershopsAppCreateCountryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppCreateCountryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppCountry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessesResponse parses an HTTP response from a BarbershopsAppGetBusinessesWithResponse call
func ParseBarbershopsAppGetBusinessesResponse(rsp *http.Response) (*BarbershopsAppGetBusinessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBusiness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppDeleteBusinessResponse parses an HTTP response from a BarbershopsAppDeleteBusinessWithResponse call
func ParseBarbershopsAppDeleteBusinessResponse(rsp *http.Response) (*BarbershopsAppDeleteBusinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppDeleteBusinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessResponse parses an HTTP response from a BarbershopsAppGetBusinessWithResponse call
func ParseBarbershopsAppGetBusinessResponse(rsp *http.Response) (*BarbershopsAppGetBusinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusiness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppUpdateBusinessResponse parses an HTTP response from a BarbershopsAppUpdateBusinessWithResponse call
func ParseBarbershopsAppUpdateBusinessResponse(rsp *http.Response) (*BarbershopsAppUpdateBusinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppUpdateBusinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusiness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessAvailabilityResponse parses an HTTP response from a BarbershopsAppGetBusinessAvailabilityWithResponse call
func ParseBarbershopsAppGetBusinessAvailabilityResponse(rsp *http.Response) (*BarbershopsAppGetBusinessAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppSlot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessBalanceResponse parses an HTTP response from a BarbershopsAppGetBusinessBalanceWithResponse call
func ParseBarbershopsAppGetBusinessBalanceResponse(rsp *http.Response) (*BarbershopsAppGetBusinessBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessBalance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppBookResponse parses an HTTP response from a BarbershopsAppBookWithResponse call
func ParseBarbershopsAppBookResponse(rsp *http.Response) (*BarbershopsAppBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppSetupPaymentIntentResponse parses an HTTP response from a BarbershopsAppSetupPaymentIntentWithResponse call
func ParseBarbershopsAppSetupPaymentIntentResponse(rsp *http.Response) (*BarbershopsAppSetupPaymentIntentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppSetupPaymentIntentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppPaymentIntent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessBookingsResponse parses an HTTP response from a BarbershopsAppGetBusinessBookingsWithResponse call
func ParseBarbershopsAppGetBusinessBookingsResponse(rsp *http.Response) (*BarbershopsAppGetBusinessBookingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessBookingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppRejectBusinessBookingResponse parses an HTTP response from a BarbershopsAppRejectBusinessBookingWithResponse call
func ParseBarbershopsAppRejectBusinessBookingResponse(rsp *http.Response) (*BarbershopsAppRejectBusinessBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppRejectBusinessBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessBookingResponse parses an HTTP response from a BarbershopsAppGetBusinessBookingWithResponse call
func ParseBarbershopsAppGetBusinessBookingResponse(rsp *http.Response) (*BarbershopsAppGetBusinessBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppCancelBusinessBookingResponse parses an HTTP response from a BarbershopsAppCancelBusinessBookingWithResponse call
func ParseBarbershopsAppCancelBusinessBookingResponse(rsp *http.Response) (*BarbershopsAppCancelBusinessBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppCancelBusinessBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppConfirmBusinessBookingResponse parses an HTTP response from a BarbershopsAppConfirmBusinessBookingWithResponse call
func ParseBarbershopsAppConfirmBusinessBookingResponse(rsp *http.Response) (*BarbershopsAppConfirmBusinessBookingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppConfirmBusinessBookingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppCreateReviewResponse parses an HTTP response from a BarbershopsAppCreateReviewWithResponse call
func ParseBarbershopsAppCreateReviewResponse(rsp *http.Response) (*BarbershopsAppCreateReviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppCreateReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppReview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessMembersResponse parses an HTTP response from a BarbershopsAppGetBusinessMembersWithResponse call
func ParseBarbershopsAppGetBusinessMembersResponse(rsp *http.Response) (*BarbershopsAppGetBusinessMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBusinessMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppCreateBusinessMemberResponse parses an HTTP response from a BarbershopsAppCreateBusinessMemberWithResponse call
func ParseBarbershopsAppCreateBusinessMemberResponse(rsp *http.Response) (*BarbershopsAppCreateBusinessMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppCreateBusinessMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppDeleteBusinessMemberResponse parses an HTTP response from a BarbershopsAppDeleteBusinessMemberWithResponse call
func ParseBarbershopsAppDeleteBusinessMemberResponse(rsp *http.Response) (*BarbershopsAppDeleteBusinessMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppDeleteBusinessMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessMemberResponse parses an HTTP response from a BarbershopsAppGetBusinessMemberWithResponse call
func ParseBarbershopsAppGetBusinessMemberResponse(rsp *http.Response) (*BarbershopsAppGetBusinessMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppUpdateBusinessMemberResponse parses an HTTP response from a BarbershopsAppUpdateBusinessMemberWithResponse call
func ParseBarbershopsAppUpdateBusinessMemberResponse(rsp *http.Response) (*BarbershopsAppUpdateBusinessMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppUpdateBusinessMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetCustomersResponse parses an HTTP response from a BarbershopsAppGetCustomersWithResponse call
func ParseBarbershopsAppGetCustomersResponse(rsp *http.Response) (*BarbershopsAppGetCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetCustomerResponse parses an HTTP response from a BarbershopsAppGetCustomerWithResponse call
func ParseBarbershopsAppGetCustomerResponse(rsp *http.Response) (*BarbershopsAppGetCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppCustomer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessPhotosResponse parses an HTTP response from a BarbershopsAppGetBusinessPhotosWithResponse call
func ParseBarbershopsAppGetBusinessPhotosResponse(rsp *http.Response) (*BarbershopsAppGetBusinessPhotosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessPhotosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBusinessPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppAddBusinessPhotoResponse parses an HTTP response from a BarbershopsAppAddBusinessPhotoWithResponse call
func ParseBarbershopsAppAddBusinessPhotoResponse(rsp *http.Response) (*BarbershopsAppAddBusinessPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppAddBusinessPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppDeleteBusinessPhotoResponse parses an HTTP response from a BarbershopsAppDeleteBusinessPhotoWithResponse call
func ParseBarbershopsAppDeleteBusinessPhotoResponse(rsp *http.Response) (*BarbershopsAppDeleteBusinessPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppDeleteBusinessPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessPhotoResponse parses an HTTP response from a BarbershopsAppGetBusinessPhotoWithResponse call
func ParseBarbershopsAppGetBusinessPhotoResponse(rsp *http.Response) (*BarbershopsAppGetBusinessPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppUpdateBusinessPhotoResponse parses an HTTP response from a BarbershopsAppUpdateBusinessPhotoWithResponse call
func ParseBarbershopsAppUpdateBusinessPhotoResponse(rsp *http.Response) (*BarbershopsAppUpdateBusinessPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppUpdateBusinessPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessPhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessRequirementsResponse parses an HTTP response from a BarbershopsAppGetBusinessRequirementsWithResponse call
func ParseBarbershopsAppGetBusinessRequirementsResponse(rsp *http.Response) (*BarbershopsAppGetBusinessRequirementsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessRequirementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessRequirements
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessReviewsResponse parses an HTTP response from a BarbershopsAppGetBusinessReviewsWithResponse call
func ParseBarbershopsAppGetBusinessReviewsResponse(rsp *http.Response) (*BarbershopsAppGetBusinessReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppReview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessScheduleResponse parses an HTTP response from a BarbershopsAppGetBusinessScheduleWithResponse call
func ParseBarbershopsAppGetBusinessScheduleResponse(rsp *http.Response) (*BarbershopsAppGetBusinessScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppUpdateBusinessScheduleResponse parses an HTTP response from a BarbershopsAppUpdateBusinessScheduleWithResponse call
func ParseBarbershopsAppUpdateBusinessScheduleResponse(rsp *http.Response) (*BarbershopsAppUpdateBusinessScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppUpdateBusinessScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetServicesResponse parses an HTTP response from a BarbershopsAppGetServicesWithResponse call
func ParseBarbershopsAppGetServicesResponse(rsp *http.Response) (*BarbershopsAppGetServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppServiceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppCreateServiceResponse parses an HTTP response from a BarbershopsAppCreateServiceWithResponse call
func ParseBarbershopsAppCreateServiceResponse(rsp *http.Response) (*BarbershopsAppCreateServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppCreateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppServiceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppDeleteServiceResponse parses an HTTP response from a BarbershopsAppDeleteServiceWithResponse call
func ParseBarbershopsAppDeleteServiceResponse(rsp *http.Response) (*BarbershopsAppDeleteServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppDeleteServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetServiceResponse parses an HTTP response from a BarbershopsAppGetServiceWithResponse call
func ParseBarbershopsAppGetServiceResponse(rsp *http.Response) (*BarbershopsAppGetServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppServiceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppUpdateServiceResponse parses an HTTP response from a BarbershopsAppUpdateServiceWithResponse call
func ParseBarbershopsAppUpdateServiceResponse(rsp *http.Response) (*BarbershopsAppUpdateServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppUpdateServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppServiceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetBusinessSettingsResponse parses an HTTP response from a BarbershopsAppGetBusinessSettingsWithResponse call
func ParseBarbershopsAppGetBusinessSettingsResponse(rsp *http.Response) (*BarbershopsAppGetBusinessSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetBusinessSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppUpdateBusinessSettingsResponse parses an HTTP response from a BarbershopsAppUpdateBusinessSettingsWithResponse call
func ParseBarbershopsAppUpdateBusinessSettingsResponse(rsp *http.Response) (*BarbershopsAppUpdateBusinessSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppUpdateBusinessSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusinessSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetPublicBusinessSettingsResponse parses an HTTP response from a BarbershopsAppGetPublicBusinessSettingsWithResponse call
func ParseBarbershopsAppGetPublicBusinessSettingsResponse(rsp *http.Response) (*BarbershopsAppGetPublicBusinessSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetPublicBusinessSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppPublicBusinessSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetMyBookingsResponse parses an HTTP response from a BarbershopsAppGetMyBookingsWithResponse call
func ParseBarbershopsAppGetMyBookingsResponse(rsp *http.Response) (*BarbershopsAppGetMyBookingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetMyBookingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetMyBusinessesResponse parses an HTTP response from a BarbershopsAppGetMyBusinessesWithResponse call
func ParseBarbershopsAppGetMyBusinessesResponse(rsp *http.Response) (*BarbershopsAppGetMyBusinessesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetMyBusinessesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppBusiness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppCreateBusinessResponse parses an HTTP response from a BarbershopsAppCreateBusinessWithResponse call
func ParseBarbershopsAppCreateBusinessResponse(rsp *http.Response) (*BarbershopsAppCreateBusinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppCreateBusinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BarbershopsAppBusiness
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseBarbershopsAppGetMyReviewsResponse parses an HTTP response from a BarbershopsAppGetMyReviewsWithResponse call
func ParseBarbershopsAppGetMyReviewsResponse(rsp *http.Response) (*BarbershopsAppGetMyReviewsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BarbershopsAppGetMyReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BarbershopsAppReview
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRadminAppGetAppsResponse parses an HTTP response from a RadminAppGetAppsWithResponse call
func ParseRadminAppGetAppsResponse(rsp *http.Response) (*RadminAppGetAppsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RadminAppGetAppsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RadminAppApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRadminAppCreateAppResponse parses an HTTP response from a RadminAppCreateAppWithResponse call
func ParseRadminAppCreateAppResponse(rsp *http.Response) (*RadminAppCreateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RadminAppCreateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RadminAppApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRadminAppGetAppResponse parses an HTTP response from a RadminAppGetAppWithResponse call
func ParseRadminAppGetAppResponse(rsp *http.Response) (*RadminAppGetAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RadminAppGetAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RadminAppApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRadminAppUpdateAppResponse parses an HTTP response from a RadminAppUpdateAppWithResponse call
func ParseRadminAppUpdateAppResponse(rsp *http.Response) (*RadminAppUpdateAppResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RadminAppUpdateAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RadminAppApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceGetAdminUsersResponse parses an HTTP response from a AuthServiceGetAdminUsersWithResponse call
func ParseAuthServiceGetAdminUsersResponse(rsp *http.Response) (*AuthServiceGetAdminUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceGetAdminUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AuthServiceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceGoogleSignInCallbackResponse parses an HTTP response from a AuthServiceGoogleSignInCallbackWithResponse call
func ParseAuthServiceGoogleSignInCallbackResponse(rsp *http.Response) (*AuthServiceGoogleSignInCallbackResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceGoogleSignInCallbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceGoogleSignInResponse parses an HTTP response from a AuthServiceGoogleSignInWithResponse call
func ParseAuthServiceGoogleSignInResponse(rsp *http.Response) (*AuthServiceGoogleSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceGoogleSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceGetCurrentUserResponse parses an HTTP response from a AuthServiceGetCurrentUserWithResponse call
func ParseAuthServiceGetCurrentUserResponse(rsp *http.Response) (*AuthServiceGetCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceGetCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthServiceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceUpdateCurrentUserResponse parses an HTTP response from a AuthServiceUpdateCurrentUserWithResponse call
func ParseAuthServiceUpdateCurrentUserResponse(rsp *http.Response) (*AuthServiceUpdateCurrentUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceUpdateCurrentUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthServiceUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceForgotPasswordResponse parses an HTTP response from a AuthServiceForgotPasswordWithResponse call
func ParseAuthServiceForgotPasswordResponse(rsp *http.Response) (*AuthServiceForgotPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceForgotPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceResetPasswordResponse parses an HTTP response from a AuthServiceResetPasswordWithResponse call
func ParseAuthServiceResetPasswordResponse(rsp *http.Response) (*AuthServiceResetPasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceResetPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceSendEmailVerificationResponse parses an HTTP response from a AuthServiceSendEmailVerificationWithResponse call
func ParseAuthServiceSendEmailVerificationResponse(rsp *http.Response) (*AuthServiceSendEmailVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceSendEmailVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceSendPhoneVerificationResponse parses an HTTP response from a AuthServiceSendPhoneVerificationWithResponse call
func ParseAuthServiceSendPhoneVerificationResponse(rsp *http.Response) (*AuthServiceSendPhoneVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceSendPhoneVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceVerifyEmailResponse parses an HTTP response from a AuthServiceVerifyEmailWithResponse call
func ParseAuthServiceVerifyEmailResponse(rsp *http.Response) (*AuthServiceVerifyEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceVerifyEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceVerifyPhoneResponse parses an HTTP response from a AuthServiceVerifyPhoneWithResponse call
func ParseAuthServiceVerifyPhoneResponse(rsp *http.Response) (*AuthServiceVerifyPhoneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceVerifyPhoneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceSignInResponse parses an HTTP response from a AuthServiceSignInWithResponse call
func ParseAuthServiceSignInResponse(rsp *http.Response) (*AuthServiceSignInResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceSignInResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceSignOutResponse parses an HTTP response from a AuthServiceSignOutWithResponse call
func ParseAuthServiceSignOutResponse(rsp *http.Response) (*AuthServiceSignOutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceSignOutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAuthServiceSignUpResponse parses an HTTP response from a AuthServiceSignUpWithResponse call
func ParseAuthServiceSignUpResponse(rsp *http.Response) (*AuthServiceSignUpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthServiceSignUpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContactServiceGetCareerApplicationsResponse parses an HTTP response from a ContactServiceGetCareerApplicationsWithResponse call
func ParseContactServiceGetCareerApplicationsResponse(rsp *http.Response) (*ContactServiceGetCareerApplicationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactServiceGetCareerApplicationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContactServiceCareerApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContactServiceGetContactRequestsResponse parses an HTTP response from a ContactServiceGetContactRequestsWithResponse call
func ParseContactServiceGetContactRequestsResponse(rsp *http.Response) (*ContactServiceGetContactRequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactServiceGetContactRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ContactServiceContactRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContactServiceApplyCareerResponse parses an HTTP response from a ContactServiceApplyCareerWithResponse call
func ParseContactServiceApplyCareerResponse(rsp *http.Response) (*ContactServiceApplyCareerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactServiceApplyCareerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseContactServiceContactRequestResponse parses an HTTP response from a ContactServiceContactRequestWithResponse call
func ParseContactServiceContactRequestResponse(rsp *http.Response) (*ContactServiceContactRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ContactServiceContactRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
